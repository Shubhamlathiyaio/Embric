// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/design_entity.dart';
import 'models/design_part_entity.dart';
import 'models/image_path_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2003503685854431101),
    name: 'DesignEntity',
    lastPropertyId: const obx_int.IdUid(9, 3704514008621011497),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2456210507189681352),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5950309875592720964),
        name: 'designNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 702319647458097569),
        name: 'designName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4941378696710555081),
        name: 'stitchRate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1577199825799579417),
        name: 'addOnPrice',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4767826865809547358),
        name: 'cPalluId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 4872876404110901902),
        relationTarget: 'DesignPartEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7519586139030791717),
        name: 'palluId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 8355223796387555420),
        relationTarget: 'DesignPartEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8595584897157839105),
        name: 'stkId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 1436189878938601455),
        relationTarget: 'DesignPartEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3704514008621011497),
        name: 'blzId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 8718065982683143731),
        relationTarget: 'DesignPartEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 1404209470053946615),
        name: 'imagePaths',
        targetId: const obx_int.IdUid(3, 1897071112733444792),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7610413272613606798),
    name: 'DesignPartEntity',
    lastPropertyId: const obx_int.IdUid(6, 2915252030399241823),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 726737845000022133),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3244326687742896444),
        name: 'head',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4044902519210662388),
        name: 'stitches',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2915252030399241823),
        name: 'type',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1897071112733444792),
    name: 'ImagePathEntity',
    lastPropertyId: const obx_int.IdUid(2, 7756756602033095203),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8375430908752021271),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7756756602033095203),
        name: 'path',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 1897071112733444792),
    lastIndexId: const obx_int.IdUid(4, 8718065982683143731),
    lastRelationId: const obx_int.IdUid(1, 1404209470053946615),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [6203518599342878408, 3100364961566376597],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    DesignEntity: obx_int.EntityDefinition<DesignEntity>(
      model: _entities[0],
      toOneRelations:
          (DesignEntity object) => [
            object.cPallu,
            object.pallu,
            object.stk,
            object.blz,
          ],
      toManyRelations:
          (DesignEntity object) => {
            obx_int.RelInfo<DesignEntity>.toMany(1, object.id):
                object.imagePaths,
          },
      getId: (DesignEntity object) => object.id,
      setId: (DesignEntity object, int id) {
        object.id = id;
      },
      objectToFB: (DesignEntity object, fb.Builder fbb) {
        final designNumberOffset = fbb.writeString(object.designNumber);
        final designNameOffset = fbb.writeString(object.designName);
        final stitchRateOffset = fbb.writeString(object.stitchRate);
        final addOnPriceOffset = fbb.writeString(object.addOnPrice);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, designNumberOffset);
        fbb.addOffset(2, designNameOffset);
        fbb.addOffset(3, stitchRateOffset);
        fbb.addOffset(4, addOnPriceOffset);
        fbb.addInt64(5, object.cPallu.targetId);
        fbb.addInt64(6, object.pallu.targetId);
        fbb.addInt64(7, object.stk.targetId);
        fbb.addInt64(8, object.blz.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final designNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final designNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final stitchRateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final addOnPriceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object = DesignEntity(
          designNumber: designNumberParam,
          designName: designNameParam,
          stitchRate: stitchRateParam,
          addOnPrice: addOnPriceParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.cPallu.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.cPallu.attach(store);
        object.pallu.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.pallu.attach(store);
        object.stk.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.stk.attach(store);
        object.blz.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.blz.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<DesignEntity>(
          object.imagePaths,
          store,
          obx_int.RelInfo<DesignEntity>.toMany(1, object.id),
        );
        return object;
      },
    ),
    DesignPartEntity: obx_int.EntityDefinition<DesignPartEntity>(
      model: _entities[1],
      toOneRelations: (DesignPartEntity object) => [],
      toManyRelations: (DesignPartEntity object) => {},
      getId: (DesignPartEntity object) => object.id,
      setId: (DesignPartEntity object, int id) {
        object.id = id;
      },
      objectToFB: (DesignPartEntity object, fb.Builder fbb) {
        final headOffset = fbb.writeString(object.head);
        final stitchesOffset = fbb.writeString(object.stitches);
        final typeOffset = fbb.writeString(object.type);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(2, headOffset);
        fbb.addOffset(3, stitchesOffset);
        fbb.addOffset(5, typeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final headParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final stitchesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = DesignPartEntity(
          type: typeParam,
          head: headParam,
          stitches: stitchesParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    ImagePathEntity: obx_int.EntityDefinition<ImagePathEntity>(
      model: _entities[2],
      toOneRelations: (ImagePathEntity object) => [],
      toManyRelations: (ImagePathEntity object) => {},
      getId: (ImagePathEntity object) => object.id,
      setId: (ImagePathEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ImagePathEntity object, fb.Builder fbb) {
        final pathOffset = fbb.writeString(object.path);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, pathOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final pathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ImagePathEntity(path: pathParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DesignEntity] entity fields to define ObjectBox queries.
class DesignEntity_ {
  /// See [DesignEntity.id].
  static final id = obx.QueryIntegerProperty<DesignEntity>(
    _entities[0].properties[0],
  );

  /// See [DesignEntity.designNumber].
  static final designNumber = obx.QueryStringProperty<DesignEntity>(
    _entities[0].properties[1],
  );

  /// See [DesignEntity.designName].
  static final designName = obx.QueryStringProperty<DesignEntity>(
    _entities[0].properties[2],
  );

  /// See [DesignEntity.stitchRate].
  static final stitchRate = obx.QueryStringProperty<DesignEntity>(
    _entities[0].properties[3],
  );

  /// See [DesignEntity.addOnPrice].
  static final addOnPrice = obx.QueryStringProperty<DesignEntity>(
    _entities[0].properties[4],
  );

  /// See [DesignEntity.cPallu].
  static final cPallu = obx.QueryRelationToOne<DesignEntity, DesignPartEntity>(
    _entities[0].properties[5],
  );

  /// See [DesignEntity.pallu].
  static final pallu = obx.QueryRelationToOne<DesignEntity, DesignPartEntity>(
    _entities[0].properties[6],
  );

  /// See [DesignEntity.stk].
  static final stk = obx.QueryRelationToOne<DesignEntity, DesignPartEntity>(
    _entities[0].properties[7],
  );

  /// See [DesignEntity.blz].
  static final blz = obx.QueryRelationToOne<DesignEntity, DesignPartEntity>(
    _entities[0].properties[8],
  );

  /// see [DesignEntity.imagePaths]
  static final imagePaths =
      obx.QueryRelationToMany<DesignEntity, ImagePathEntity>(
        _entities[0].relations[0],
      );
}

/// [DesignPartEntity] entity fields to define ObjectBox queries.
class DesignPartEntity_ {
  /// See [DesignPartEntity.id].
  static final id = obx.QueryIntegerProperty<DesignPartEntity>(
    _entities[1].properties[0],
  );

  /// See [DesignPartEntity.head].
  static final head = obx.QueryStringProperty<DesignPartEntity>(
    _entities[1].properties[1],
  );

  /// See [DesignPartEntity.stitches].
  static final stitches = obx.QueryStringProperty<DesignPartEntity>(
    _entities[1].properties[2],
  );

  /// See [DesignPartEntity.type].
  static final type = obx.QueryStringProperty<DesignPartEntity>(
    _entities[1].properties[3],
  );
}

/// [ImagePathEntity] entity fields to define ObjectBox queries.
class ImagePathEntity_ {
  /// See [ImagePathEntity.id].
  static final id = obx.QueryIntegerProperty<ImagePathEntity>(
    _entities[2].properties[0],
  );

  /// See [ImagePathEntity.path].
  static final path = obx.QueryStringProperty<ImagePathEntity>(
    _entities[2].properties[1],
  );
}
